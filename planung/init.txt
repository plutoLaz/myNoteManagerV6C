Dokument Angelegt am Dienstag, 26.09.2023
=========================================




Das Ziel dieser Variante(NMV V6C), ist es zu Prüfen, ob eine bessere
trennung, zwischen der Oberfläche(TForm) und der "SQL API".

Der Grund ist, so wäre es vielleicht Möglich, Automatische Tests einzuführen.
Die auf der einen Seite, die SQL API testet und auf der anderen Seite, teile der Oberfläche.

Wie könnte das aussehen?

Es könnte eine Datacontrol Klasse geben. Hier ist die Frage,
ob diese von einer SQL API Classe abgeleitet sein sollte oder einfach nur verbunden ist.

Diese Methoden werden in einem event aufgerufen. Wenn die Datenbank Abfrage erfolgt ist,
wird ein Event aufgerufen. Das ist einer dieser Methoden
SQLResultAddNote
SQLResultEditNote
SQLResultDeleteNote
SQLResultGetNotes

SQLResultAddTag
SQLResultEditTag
SQLResultDeleteTag
SQLResultGetTags

Die Klasse NMV6C_Control hat jetzt diese Methoden und wie geht es weiter?
Wie könnte ich, eine weitere Schicht einzuführen?
Auf der einen Seite gibt es die Datenbank Methoden auf der anderen Seite die GUI Methoden.

Teil 1: Die Units uNMV6C_Type und uNMV6C_SQLite
-----------------------------------------------

Mögliche Klassen und ihre Methoden
Events
unit uNMV6C_Type.pas
 TPLOnErrorEventType = (
                         EVT_ERROR   = 0,
                         EVT_WARNING = 1,
                         EVT_INFO    = 2
                       ); // TPLOnErrorEvent

 1 OnSQLResultAddNote = procedure(aNoteObject:TJSONObject) of object;
 2 OnSQLResultUpdateNote = procedure(aNoteObject:TJSONObject) of object;
 3 OnSQLResultDeleteNote = procedure(aNoteObject:TJSONObject) of object;
 4 OnSQLResultGetNote = procedure(aNoteObject:TJSONObject) of object;
 5 OnSQLResultGetContent = procedure(aNoteObject:TJSONObject) of object;
 6 OnSQLResultGetTagListFromTagID = procedure(aNoteObject:TJSONObject) of object;

 7 OnSQLResultAddTag = procedure(aTagObject:TJSONObject) of object;
 8 OnSQLResultUpdateTag = procedure(aTagObject:TJSONObject) of object;
 9 OnSQLResultDeleteTag = procedure(aTagObject:TJSONObject) of object;
10 OnSQLResultError = procedure(const aErrorEventType:TPLOnErrorEventType; aErrorMSG:String; aSender:String) of Object;


1. unit: uNMV6C_SQLite.pas
Class: TPLNMV6C_sqlite
 1.1 AddNote(var aJObject:TJSONObject):Boolean; > OnSQLResultAddNote
 1.2 UpdateNote(var aJObject:TJSONObject):Boolean; > OnSQLResultUpdateNote
 1.3 DeleteNote(var aJObject:TJSONObject):Boolean; > OnSQLResultDeleteNote
 1.4 GetNote(aTagList:TJSONArray; const aSQLStr:String = ''; aCreateStatistik:boolean = false):Boolean; > OnGetNote
 1.5 GetContentFromNote(const aUUID:String):Boolean > OnSQLResultGetContent
 1.6 GetTagListFromTagID(const aUUID:String) > OnSQLResultGetTagListFromTagID

 1.7 AddTag(const aTagName:String):Boolean; > OnSQLResultAddTag
 1.8 AddTags(aJSONArray:TJSONArray):Boolean; > OnSQLResultAddTag
 1.9 UpdateTag():Boolean; > OnSQLResultUpdateTag
1.10 DeleteTag():Boolean; > OnSQLResultDeleteTag
1.11 GetTag():Boolean; > OnSQLResultGetTag

1.12 ImportFromOldDataBase(const aFileName:String):Boolean;

Teil 2: uNMV6C_Control
----------------------
Status: Unklar, wie die Verbindung zu TFrom1 aussehen könnnte.

1. unit: uNMV6C_Control.pas
Class: TPLNMV6C_Control

Hat eine Verbindung zu TPLNMV6C_sqlite.
Könnte in der Unit1 verwendet werden.

OnGetNoteBrowser(const aListView:TListView)
OnGetOpenNotes(const aPageControl:TPageControl)
OnGetNoteCount(const aCount:Integer)
OnGetNoteTagEditBrowser(const aCheckListBox:TCheckListBox)
OnGetTagFilter(const aMyHorizontalBar:TMyHorizontalBar)

- NoteBrowser: TListView - Eine Liste von Notizen, Items:TListItems(TFPList)
- PageControl: TPageEditor - Geöffnete Notizen, zum Bearbeiten/Anzeigen(Pages:TStrings)
- lbCount: TLabel - Verwaltet die Aktuelle Anzahl der Notizen in NoteBrowser an
- CheckListBox: TCheckListBox - Stellt eine Verbindung zwischen Notiz und Tags her
- MyHorizontalBar: TMyHorizontalBar - Zeigt die Verfügbaren Tags, nebeneinander in einer Liste an
- Eine Reihe von Buttons um verschiedene Filter, zu benutzen


Teil 3:
-------------------------

Gewiesse Sachen, sollen gespeichert werden. In einer Config Datei.
Wie sich raus gestellt hat, wäre es Praktisch, wenn bestimmte Sachen in der Datenbank selbst gespeichert würden.
Z.B. die zu Letzt geöffneten Notizen.
Andere Dinge könnten wiederum in das Config file gespeichert werden.


Archiv
Die Datencontrol Klasse könnte z.b. mit Events arbeiten:

Für Title, Content, UUID, mTime, aTime, cTime, mCount und aCount
OnGetNoteInfo = procedure (aNoteObject) of object
